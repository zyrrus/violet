program ::= comment
          | import-statement
          | function-declaration
          | struct-declaration
          | enum-declaration
          | type-alias
          | EOF

program ::= comment
          | EOF

comment ::= multi-line-comment | single-line-comment
multi-line-comment ::= '---' {ANY_CHARACTER} '---'
single-line-comment ::= '--' {ANY_CHARACTER} '\n'



















<file> ::= <header> <import-statements> <function-declarations>

<header> ::= "---" <text> "---"

<text> ::= <line> <text>
        | ε  ; Empty production for termination

<line> ::= <line-text> '\n'

<line-text> ::= <comment>
            | <import-statement>
            | <function-declaration>
            | <text>

<comment> ::= "---" <comment-text> "---"

<comment-text> ::= <text> <comment-text>
               | ε  ; Empty production for termination

<import-statements> ::= '-- Import statements' <import-list>

<import-list> ::= <import-statement> <import-list>
              | ε  ; Empty production for termination

<import-statement> ::= 'import' <module-name> '{' <imported-identifiers> '}'

<module-name> ::= <identifier>

<imported-identifiers> ::= <identifier> <identifier-list>
                      | ε  ; Empty production for no imported identifiers

<identifier-list> ::= ',' <identifier> <identifier-list>
                 | ε  ; Empty production for termination

<function-declarations> ::= <function-declaration> <function-declarations>
                      | ε  ; Empty production for termination

<function-declaration> ::= 'fn' <function-name> <parameter-list> ':' <return-type> <function-body>

<function-name> ::= <identifier>

<parameter-list> ::= '(' <parameters> ')'

<parameters> ::= <parameter> <parameter-list>
            | ε  ; Empty production for no parameters

<parameter> ::= <identifier> ':' <type>

<type> ::= 'Num'
      | 'Str'
      | <custom-type>  ; Add custom types as needed

<custom-type> ::= <identifier>

<function-body> ::= '{' <statements> '}'

<statements> ::= <statement> <statements>
            | ε  ; Empty production for no statements

<statement> ::= <assignment>
          | <conditional>
          | <return-statement>
          | <print-statement>

<assignment> ::= 'let' <variable> '=' <expression>

<variable> ::= <identifier>

<expression> ::= <identifier> <binary-operator> <expression>
           | <literal>
           | <function-call>
           | '(' <expression> ')'

<binary-operator> ::= '==' | '!=' | '++' | '++=' | '+'

<literal> ::= <string-literal>
         | <number-literal>

<string-literal> ::= '"' <string-content> '"'

<string-content> ::= <char> <string-content>
               | ε  ; Empty production for termination

<number-literal> ::= <digit> <number-literal>
               | ε  ; Empty production for termination

<function-call> ::= <function-name> '(' <arguments> ')'

<arguments> ::= <expression> <argument-list>
          | ε  ; Empty production for no arguments

<argument-list> ::= ',' <expression> <argument-list>
              | ε  ; Empty production for termination

<conditional> ::= 'if' <expression> <block> <conditional-else>

<conditional-else> ::= 'else' <block>
                 | ε  ; Empty production for no else

<block> ::= '{' <statements> '}'

<return-statement> ::= 'return' <expression>

<print-statement> ::= 'print' '(' <expression> ')'

<identifier> ::= [a-zA-Z][a-zA-Z0-9]*

<digit> ::= [0-9]

<char> ::= any valid character

<eps> ::= ε ; Empty production
